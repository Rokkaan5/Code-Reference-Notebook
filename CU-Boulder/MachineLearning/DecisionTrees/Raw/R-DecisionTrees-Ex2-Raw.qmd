---
layout: page
title: "Gates Decision Trees Ex2 Raw-code-R"
author: Professor Ami Gates
permalink: /CUB-ML/Raw/DecisionTrees-Ex2-R
---

# Decision Trees (Example2) in R - Dr. Gates' full, raw (unedited) code
Reference: Professor Ami Gates, Dept. Applied Math, Data Science, University of Colorado

[Dr. Gates' Website](https://gatesboltonanalytics.com/)

```r
################################################
## 
##  Basic R Decision Trees Tutorial 
##  numeric text data via corpus
##
##  Gates
################################################
## The text corpus used is here:
## https://drive.google.com/drive/folders/1xtMjNKb1-W9rh67_ZtESwxaArCuUbApd?usp=sharing
##
################################################

library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(Cairo)
library(network)
##If you install from the source....
#Sys.setenv(NOAWT=TRUE)
## Do ONCE: install.packages("wordcloud")
library(wordcloud)
## Do ONCE: install.packages("tm")
library(tm)
# Do ONCE: install.packages("Snowball")
## NOTE Snowball is not yet available for R v 3.5.x
## So I cannot use it  - yet...
##library("Snowball")
##set working directory
## ONCE: install.packages("slam")
library(slam)
library(quanteda)
## ONCE: install.packages("quanteda")
## Note - this includes SnowballC
library(SnowballC)
library(arules)
##ONCE: install.packages('proxy')
library(proxy)
## ONCE: if needed:  install.packages("stringr")
library(stringr)
## ONCE: install.packages("textmineR")
library(textmineR)
library(igraph)
library(lsa)


## This is my path - update to your path
TextCorpusPath="C:/Users/profa/Documents/Python Scripts/TextMining/DATA/Sent_Corpus"

#######################################
##  Read in and prepare the data.
######################################################

##-------------------------------------------------------
## Read in and prep the text data from the corpus
(NCorpus <- Corpus(DirSource(TextCorpusPath)))
## Here, I am keeping a list of the filenames so I can associate them with the DTM
(FileNames <- list.files(TextCorpusPath, pattern=NULL))
NCorpus_DTM <- DocumentTermMatrix(NCorpus,
                                  control = list(
                                    stopwords = TRUE, ## remove normal stopwords
                                    wordLengths=c(3, 10), ## get rid of words of len 2 or smaller or larger than 15
                                    removePunctuation = TRUE,
                                    removeNumbers = TRUE,
                                    tolower=TRUE
                                    #stemming = TRUE,
                                  ))

#inspect(NCorpus_DTM)
## Convert to DF
NCorpusDF <- as.data.frame(as.matrix(NCorpus_DTM))
#head(NCorpusDF)
NCorpus_MAT <- as.matrix(NCorpus_DTM)
(NCorpus_MAT[1:12,1:10])

## WORDCLOUD ##_---------------------------------------
word.freq <- sort(rowSums(t(NCorpus_MAT)), decreasing = T)
wordcloud(words = names(word.freq), freq = word.freq*2, min.freq = 2,
          random.order = F, max.words=30)

## Place the LABELS onto the DF---------------------------------
## Recall that the filenames must be converted and added as labels
FileNames
(Temp1<-strsplit(FileNames,"_"))
#Temp1[[5]][1]
MyList<-list()

for(i in 1:length(FileNames)){
  MyList[[i]] <- Temp1[[i]][1]
  
}

MyList

## Add MyList to the dataframe
(NCorpusDF$LABEL <- unlist(MyList))
(NumCol<-ncol(NCorpusDF))  ## get the num columns
## Have a look to check for the label - which is at the end
NCorpusDF[1:5, (NumCol-5):NumCol] 

#####################################################
## We have labeled text data
## as a dataframe
##
######################################################
NCorpusDF[1:3, ((NumCol/2)-5):(NumCol/2)]   #label here is called LABEL

##################### CRITICAL ###################
## Make sure that your labels are
## type FACTOR!!
##################################################
str(NCorpusDF$LABEL)
## It was not!!
## Fix it
NCorpusDF$LABEL <- as.factor(NCorpusDF$LABEL)
## check it
str(NCorpusDF$LABEL)


########################################################
##
##       Decision Trees, etc..
##
#########################################################
##
## At this point, we have created a dataframe - 
## from text data - 
## it has labels. 
## Now we can perform DT.......................
########################################################
## In R - unlike Python - you only need to remove the label
## from the TESTING data but not from the TRAINING data

## There are many ways to create Training and Testing data

##################### CREATE Train/Test for Text data
##--------------------------------------------------------

(every7_indexes<-seq(1,nrow(NCorpusDF),7))
##  [1]   1   8  15  22  29  36  43  50  ...
NCorpusDF_Test<-NCorpusDF[every7_indexes, ]
NCorpusDF_Train<-NCorpusDF[-every7_indexes, ]
NCorpusDF_Train[1:5, (NumCol-5):NumCol] 
NCorpusDF_Test[1:5, (NumCol-5):NumCol] 

#############
## REMOVE the labels from the test data
############

## AFTER
## VERY IMPORTANT - this works when the LABEL is AT THE END...
## Otherwise it must be updated.....
## -------------------------------
(NCorpusDF_TestLabels<-NCorpusDF_Test[NumCol] )
NCorpusDF_Test<-NCorpusDF_Test[-c(NumCol)] ##
(NewNumCol<-ncol(NCorpusDF_Test))
NCorpusDF_Test[1:5, (NewNumCol-5):NewNumCol] 



##############################################################
##
##            Decision Trees 
##
##############################################################
## Remember the NAMES of the dataframes we just created:

## NCorpusDF_Train
## NCorpusDF_Test
## NCorpusDF_TestLabels

###################################################################

## Text DT
fitText <- rpart(NCorpusDF_Train$LABEL ~ . -night - movie -plot - people, data = NCorpusDF_Train, method="class")
summary(fitText)

##########################
## Predict the Test sets
#########################

## Text--------------------------------------
(predictedText= predict(fitText, NCorpusDF_Test, type="class"))
## Confusion Matrix
#str(NCorpusDF_TestLabels)
#str(predictedText)
table(unlist(predictedText) ,unlist(NCorpusDF_TestLabels))
## VIS..................
fancyRpartPlot(fitText)


## Save the Decision Tree as a jpg image
jpeg("DecisionTree.jpg")
fancyRpartPlot(fitText)
dev.off()

########################### Information Gain with Entropy ----------------------------
#library(CORElearn)
##install.packages("CORElearn")

############# Text.............
#Method.CORElearn <- CORElearn::attrEval(NCorpusDF_Train$LABEL ~ ., data=NCorpusDF_Train,  estimator = "InfGain")
#head( sort(Method.CORElearn, decreasing = TRUE), 10)
#Method.CORElearn2 <- CORElearn::attrEval(NCorpusDF_Train$LABEL ~ ., data=NCorpusDF_Train,  estimator = "Gini")
#head( sort(Method.CORElearn2, decreasing = TRUE), 10)
#Method.CORElearn3 <- CORElearn::attrEval(NCorpusDF_Train$LABEL ~ ., data=NCorpusDF_Train,  estimator = "GainRatio")
#head( sort(Method.CORElearn3, decreasing = TRUE), 10)
```
