---
title: "Association Rule Mining Examples"
author: "Dr. Gates"
format:
    html:
        code-fold: false
execute:
    output: true
    warning: false
toc: true
---


This example will use the Apriori Alg.

To perform Association Rule Mining, transaction data is needed. 
MANY libraries will also be required... 

To perform association rule mining, you must have transaction data AND you must create a datafile that presents that data in whatever way your library expects. I will use *basket* here.


TO GET this code to work and to get arulesViz to work - 
you wil have to carefully and patiently do the following:

# Install packages
**Do these installs once:**
```{r package installation (if needed)}
## install.packages("arules")
## For arulesViz to work on R version 3.5.x, you will
## need to first go through an installation of RTools. 
## See HOW TO above.
## Next - once the RTools exe has been downloaded and installed
## per the instructions, then, do these install.packages here in RStudio:
#install.packages("TSP")
#install.packages("data.table")
## NOTE: If you are asked if you want to INSTALL FROM SOURCE - click YES!
#install.packages("arulesViz", dependencies = TRUE)
## IMPORTANT ## arules ONLY grabs rules with ONE item on the right
## install.packages("sp")
## NOTE R V3.5.0 does not use the older
## datasets packages
## install.packages("datasets.load") - not used here
## install.packages("ggplot2") - not used here

## install.packages("dplyr", dependencies = TRUE)
## install.packages("purrr", dependencies = TRUE)
## install.packages("devtools", dependencies = TRUE)
## install.packages("tidyr")
```
```{r import libraries, results='hide',message=FALSE}
library(viridis)
library(arules)
library(TSP)
library(data.table)
#library(ggplot2)
#library(Matrix)
library(tcltk)
library(dplyr)
library(devtools)
library(purrr)
library(tidyr)
## DO THIS ONCE
## FIRST - you MUST register and log into github
## install_github("mhahsler/arulesViz")
## RE: https://github.com/mhahsler/arulesViz
```
## In case of `arules` error

this is a chunk of code that 99% of time works for the professor whenever code breaks from `arules`
```{r in case of arules error,echo=TRUE,eval=FALSE}
## IF YOUR CODE BREAKS - TRY THIS

## Error in length(obj) : Method length not implemented for class rules 
## DO THIS: 
## (1) 
detach("package:arulesViz", unload=TRUE)
## (2) 
detach("package:arules", unload=TRUE)
## (3) 
library(arules)
## (4) 
library(arulesViz)
```
```{r}
## To see if you have tcltk run this on the console...
# capabilities()["tcltk"]
library(arulesViz)
```

```{r set working directory, eval=FALSE}
## YOUR working dir goes here...
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# JK note: in this case I set the wd to the current file source location
```


# Example 1: Kumar's Beer Example

Dataset: [KumarGroceriesAS_Transactions](https://drive.google.com/file/d/1BvU3iXtrwxfjBsRShaDgI-Ldh7Y3XSEn/view?usp=sharing)

Dataset: [HealthyBasket](https://drive.google.com/file/d/1qaWSTwjrj7tNB43zLss9KC_ecJKp6W4g/view?usp=sharing)

```{r}
FoodsKumar <- read.transactions("../../data_files/KumarGroceriesAS_Transactions.csv",
                                rm.duplicates = FALSE, 
                                format = "basket",  ##if you use "single" also use cols=c(1,2)
                                sep=",",  ## csv file
                                cols=1) ## The dataset HAS row numbers
inspect(FoodsKumar)
```
## Use apriori to get the RULES
```{r}

FrulesK = arules::apriori(FoodsKumar, parameter = list(support=.35, 
                                                       confidence=.5, minlen=2))
inspect(FrulesK)
```
### Plot of which items are most frequent
```{r}
itemFrequencyPlot(FoodsKumar, topN=20, type="absolute")
```

### Sort rules by a measure such as conf, sup, or lift
```{r}
SortedRulesK <- sort(FrulesK, by="confidence", decreasing=TRUE)
inspect(SortedRulesK[1:10])
(summary(SortedRulesK))
```
## Selecting or targeting specific rules  RHS
```{r}
BeerRules <- apriori(data=FoodsKumar,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="lhs", rhs="Beer"),
                     control=list(verbose=FALSE))
BeerRules <- sort(BeerRules, decreasing=TRUE, by="confidence")
inspect(BeerRules[1:4])
```
## Selecting rules with LHS specified
```{r}
BreadRules <- apriori(data=FoodsKumar,parameter = list(supp=.001, conf=.01, minlen=2),
                      appearance = list(default="rhs", lhs="Bread"),
                      control=list(verbose=FALSE))
BreadRules <- sort(BreadRules, decreasing=TRUE, by="support")
inspect(BreadRules[1:4])
```
## Visualize
tcltk
```{r}
subrulesK <- head(sort(SortedRulesK, by="lift"),10)
plot(subrulesK)

plot(subrulesK, method="graph", engine="interactive")
```



# Example 2: Healthy Food Transaction Data

HERE IS THE [DATA](https://drive.google.com/file/d/1qaWSTwjrj7tNB43zLss9KC_ecJKp6W4g/view?usp=sharing) - but you should make your own dataset!

```{r}
Foods <- read.transactions("../../data_files/HealthyBasketData.csv",
                           rm.duplicates = FALSE, 
                           format = "basket",  ##if you use "single" also use cols=c(1,2)
                           sep=",",  ## csv file
                           cols=NULL) ## The dataset has no row numbers
inspect(Foods)
```

## Use apriori to get the RULES
```{r}
Frules = arules::apriori(Foods, parameter = list(support=.35, 
                                                 confidence=.5, minlen=2))
inspect(Frules)
```
### Plot of which items are most frequent
```{r}
itemFrequencyPlot(Foods, topN=20, type="absolute")
```
### Sort rules by a measure such as conf, sup, or lift
```{r}
SortedRules <- sort(Frules, by="confidence", decreasing=TRUE)
inspect(SortedRules[1:10])
(summary(SortedRules))
```
## Selecting or targeting specific rules  RHS
```{r}
ChocRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="lhs", rhs="chocloate"),
                     control=list(verbose=FALSE))
ChocRules <- sort(ChocRules, decreasing=TRUE, by="confidence")
inspect(ChocRules[1:4])
```
## Selecting rules with LHS specified
```{r}
CarrotRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="carrot"),
                       control=list(verbose=FALSE))
CarrotRules <- sort(CarrotRules, decreasing=TRUE, by="support")
inspect(CarrotRules[1:4])
```

## Visualize
tcltk
```{r}
subrules <- head(sort(SortedRules, by="lift"),10)
plot(subrules)

#plot(subrules, method="graph", engine="interactive")
plot(subrules, method="graph", engine="htmlwidget")
```

# Session Info
```{r Session Info}
sessionInfo()
```

